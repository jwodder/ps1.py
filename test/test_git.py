from __future__ import annotations
import pytest
from jwodder_ps1.git import GitState, GitStatus, WorkTreeStatus
from jwodder_ps1.style import ANSIStyler


@pytest.mark.parametrize(
    "gs,rendered",
    [
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=None,
            ),
            "@\x1B[92mmain\x1B[m",
            id="simple-bare",
        ),
        pytest.param(
            GitStatus(
                head="v0.1.0",
                detached=True,
                ahead=None,
                behind=None,
                wkt=None,
            ),
            "@\x1B[94mv0.1.0\x1B[m",
            id="detached-bare",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=1,
                behind=None,
                wkt=None,
            ),
            "@\x1B[92mmain\x1B[m\x1B[32m+1\x1B[m",
            id="ahead-bare",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=2,
                wkt=None,
            ),
            "@\x1B[92mmain\x1B[m\x1B[31m-2\x1B[m",
            id="behind-bare",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=1,
                behind=2,
                wkt=None,
            ),
            "@\x1B[92mmain\x1B[m\x1B[32m+1\x1B[m,\x1B[31m-2\x1B[m",
            id="ahead-behind-bare",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=False,
                    unstaged=False,
                    untracked=False,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[92mmain\x1B[m",
            id="simple",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=True,
                    unstaged=False,
                    untracked=False,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[92mmain\x1B[m\x1B[32m*\x1B[m",
            id="staged",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=False,
                    unstaged=True,
                    untracked=False,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[92mmain\x1B[m\x1B[31m*\x1B[m",
            id="unstaged",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=True,
                    unstaged=True,
                    untracked=False,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[92mmain\x1B[m\x1B[93;1m*\x1B[m",
            id="staged-unstaged",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=True,
                    staged=False,
                    unstaged=False,
                    untracked=False,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[93;1m+\x1B[m\x1B[92mmain\x1B[m",
            id="stashed",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=False,
                    unstaged=False,
                    untracked=True,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[92mmain\x1B[m\x1B[31;1m+\x1B[m",
            id="untracked",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=True,
                    staged=False,
                    unstaged=True,
                    untracked=True,
                    conflict=False,
                    state=None,
                ),
            ),
            "@\x1B[93;1m+\x1B[m\x1B[92mmain\x1B[m\x1B[31m*\x1B[m\x1B[31;1m+\x1B[m",
            id="stashed-unstaged-untracked",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=3,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=True,
                    staged=True,
                    unstaged=False,
                    untracked=False,
                    conflict=False,
                    state=None,
                ),
            ),
            (
                "@\x1B[93;1m+\x1B[m"
                "\x1B[92mmain\x1B[m"
                "\x1B[32m+3\x1B[m"
                "\x1B[32m*\x1B[m"
            ),
            id="ahead-stashed-staged",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=False,
                    unstaged=False,
                    untracked=False,
                    conflict=True,
                    state=None,
                ),
            ),
            "@\x1B[92mmain\x1B[m\x1B[31;1m!\x1B[m",
            id="conflict",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=None,
                behind=None,
                wkt=WorkTreeStatus(
                    stashed=False,
                    staged=False,
                    unstaged=False,
                    untracked=False,
                    conflict=False,
                    state=GitState.REBASE_MERGING,
                ),
            ),
            "@\x1B[92mmain\x1B[m\x1B[35m[REBAS]\x1B[m",
            id="rebasing",
        ),
        pytest.param(
            GitStatus(
                head="main",
                detached=False,
                ahead=3,
                behind=1,
                wkt=WorkTreeStatus(
                    stashed=True,
                    staged=True,
                    unstaged=True,
                    untracked=True,
                    conflict=True,
                    state=GitState.CHERRY_PICKING,
                ),
            ),
            (
                "@\x1B[93;1m+\x1B[m"
                "\x1B[92mmain\x1B[m"
                "\x1B[32m+3\x1B[m,"
                "\x1B[31m-1\x1B[m"
                "\x1B[93;1m*\x1B[m"
                "\x1B[31;1m+\x1B[m"
                "\x1B[35m[CHYPK]\x1B[m"
                "\x1B[31;1m!\x1B[m"
            ),
            id="everything",
        ),
    ],
)
def test_display_git_status_ansi(gs: GitStatus, rendered: str) -> None:
    assert gs.display(ANSIStyler()) == rendered
